import Foundation
import RealmSwift

// MARK: - 1. Realm Object Definitions (–û–±–Ω–æ–≤–ª–µ–Ω–æ)

// Client Object (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∂–µ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞)
class ClientObject: Object {
    @Persisted(primaryKey: true) var id: String = UUID().uuidString
    @Persisted var clientName: String?
    @Persisted var email: String?
    @Persisted var phoneNumber: String?
    @Persisted var address: String?
    @Persisted var idNumber: String?
    @Persisted var faxNumber: String?
    @Persisted var tags = RealmSwift.List<String>()
    @Persisted var clientTypeRaw: String = ClientType.newClient.rawValue

    // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ Swift —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ Realm Object (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    convenience init(client: Client) {
        self.init()
        self.id = client.id?.uuidString ?? UUID().uuidString
        self.clientName = client.clientName
        self.email = client.email
        self.phoneNumber = client.phoneNumber
        self.address = client.address
        self.idNumber = client.idNumber
        self.faxNumber = client.faxNumber
        self.tags.append(objectsIn: client.tags)
        self.clientTypeRaw = client.clientType.rawValue
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ Realm Object –≤ Swift —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    var toStruct: Client {
        let type = ClientType(rawValue: clientTypeRaw) ?? .newClient
        return Client(
            id: UUID(uuidString: id),
            clientName: clientName,
            email: email,
            phoneNumber: phoneNumber,
            address: address,
            idNumber: idNumber,
            faxNumber: faxNumber,
            tags: Array(tags),
            clientType: type
        )
    }
}

// Invoice Item Object (EmbeddedObject, –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
class InvoiceItemObject: EmbeddedObject {
    @Persisted var id: String = UUID().uuidString
    @Persisted var name: String?
    @Persisted var itemDescription: String = "" // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å 'description'
    @Persisted var quantity: Double = 1.0
    @Persisted var unitPrice: Double = 0.0

    @Persisted var discountValue: Double = 0.0
    @Persisted var discountTypeRaw: String = DiscountType.percentage.rawValue
    @Persisted var isTaxable: Bool = true
    @Persisted var unitTypeRaw: String = UnitType.item.rawValue

    // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ Swift —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ Realm Object (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    convenience init(item: InvoiceItem) {
        self.init()
        self.id = item.id.uuidString
        self.name = item.name
        self.itemDescription = item.description
        self.quantity = item.quantity
        self.unitPrice = item.unitPrice
        
        self.discountValue = item.discountValue
        self.discountTypeRaw = item.discountType.rawValue
        self.isTaxable = item.isTaxable
        self.unitTypeRaw = item.unitType.rawValue
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ Realm Object –≤ Swift —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    var toStruct: InvoiceItem {
        let discountType = DiscountType(rawValue: discountTypeRaw) ?? .percentage
        let unitType = UnitType(rawValue: unitTypeRaw) ?? .item
        
        return InvoiceItem(
            id: UUID(uuidString: id) ?? UUID(),
            name: name,
            description: itemDescription,
            quantity: quantity,
            unitPrice: unitPrice,
            discountValue: discountValue,
            discountType: discountType,
            isTaxable: isTaxable,
            unitType: unitType
        )
    }
}

// Invoice Object (–ì–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è, –û–ë–ù–û–í–õ–ï–ù)
class InvoiceObject: Object {
    @Persisted(primaryKey: true) var id: String = UUID().uuidString
    @Persisted var invoiceTitle: String?
    @Persisted var client: ClientObject?
    @Persisted var items = RealmSwift.List<InvoiceItemObject>()
    @Persisted var taxRate: Double = 0.0
    @Persisted var discount: Double = 0.0
    @Persisted var invoiceDate: Date = Date()
    @Persisted var dueDate: Date = Date()
    @Persisted var creationDate: Date = Date()
    
    // üí° –û–ë–ù–û–í–õ–ï–ù–ù–´–ï / –ù–û–í–´–ï –ü–û–õ–Ø
    // –°—Ç–∞—Ç—É—Å —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ String (rawValue InvoiceStatus)
    @Persisted var statusRaw: String = InvoiceStatus.draft.rawValue
    // –í–∞–ª—é—Ç–∞ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ String (rawValue Currency)
    @Persisted var currencyRaw: String = Currency.USD.rawValue
    
    @Persisted var totalAmount: String = "" // –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –≤—ã—á–∏—Å–ª—è–ª–∏

    // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ Swift —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ Realm Object (–û–ë–ù–û–í–õ–ï–ù)
    convenience init(invoice: Invoice, clientObject: ClientObject?) {
        self.init()
        self.id = invoice.id.uuidString
        self.invoiceTitle = invoice.invoiceTitle
        
        self.client = clientObject
        
        // –ú–∞–ø–ø–∏–Ω–≥ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –≤ Realm List –æ–±—ä–µ–∫—Ç–æ–≤
        self.items.append(objectsIn: invoice.items.map { InvoiceItemObject(item: $0) })
        self.taxRate = invoice.taxRate
        self.discount = invoice.discount
        self.invoiceDate = invoice.invoiceDate
        self.dueDate = invoice.dueDate
        self.creationDate = invoice.creationDate
        
        // üí° –û–ë–ù–û–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ rawValue Enums
        self.statusRaw = invoice.status.rawValue
        self.currencyRaw = invoice.currency.rawValue
        
        self.totalAmount = invoice.totalAmount // –ù–µ –≤—ã—á–∏—Å–ª—è–µ–º –∑–¥–µ—Å—å, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ Realm Object –≤ Swift —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–û–ë–ù–û–í–õ–ï–ù)
    var toStruct: Invoice {
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ rawValue –∫ enum
        let status = InvoiceStatus(rawValue: statusRaw) ?? .draft
        let currency = Currency(rawValue: currencyRaw) ?? .USD
        
        return Invoice(
            id: UUID(uuidString: id) ?? UUID(),
            invoiceTitle: invoiceTitle,
            client: client?.toStruct,
            items: Array(items.map { $0.toStruct }),
            taxRate: taxRate,
            discount: discount,
            invoiceDate: invoiceDate,
            dueDate: dueDate,
            creationDate: creationDate,
            // üí° –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Enums
            status: status,
            currency: currency,
            totalAmount: totalAmount
        )
    }
}

// MARK: - 2. Invoice Service (–û–±–Ω–æ–≤–ª–µ–Ω–æ)

protocol InvoiceServiceProtocol {
    func save(invoice: Invoice) throws
    func getAllInvoices() -> [Invoice]
    func getInvoice(id: UUID) -> Invoice?
    func deleteInvoice(id: UUID) throws
    func deleteAllInvoices() throws
    func updateInvoice(_ newInvoice: Invoice) throws // –î–æ–±–∞–≤–∏–º –≤ –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
}

class InvoiceService: InvoiceServiceProtocol {
    private let realm: Realm

    init() throws {
        // ‚ö†Ô∏è –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é —Å—Ö–µ–º—ã, —Ç.–∫. —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ InvoiceObject –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.
        let currentSchemaVersion: UInt64 = 3

        let config = Realm.Configuration(
            schemaVersion: currentSchemaVersion,
            migrationBlock: { migration, oldSchemaVersion in
                
                // –ú–∏–≥—Ä–∞—Ü–∏—è —Å –≤–µ—Ä—Å–∏–∏ < 2 —É–∂–µ –æ–ø–∏—Å–∞–Ω–∞.
                
                if oldSchemaVersion < 3 {
                    // –ú–∏–≥—Ä–∞—Ü–∏—è —Å –≤–µ—Ä—Å–∏–∏ 2 –¥–æ –≤–µ—Ä—Å–∏–∏ 3: –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è statusRaw –∏ currencyRaw –≤ InvoiceObject.
                    migration.enumerateObjects(ofType: InvoiceObject.className()) { oldObject, newObject in
                        // status: –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –±—ã–ª–æ –ø–æ–ª–µ 'status' —Ç–∏–ø–∞ String.
                        // –¢–µ–ø–µ—Ä—å –æ–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ 'statusRaw', –Ω–æ —Ç.–∫. —Ç–∏–ø –æ—Å—Ç–∞–ª—Å—è String, Realm –¥–æ–ª–∂–µ–Ω
                        // —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º.
                        // –ï—Å–ª–∏ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –±—ã–ª–æ 'status', –∞ –±—ã–ª–æ –¥—Ä—É–≥–æ–µ –ø–æ–ª–µ,
                        // –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                        
                        // –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –ø–æ–ª–µ 'status' –≤ 'statusRaw', Realm –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç—å
                        // –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è.
                        
                        // üí° –ù–û–í–û–ï –ü–û–õ–ï: currencyRaw
                        newObject!["currencyRaw"] = Currency.USD.rawValue // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        
                        // üí° –ü–û–õ–ï 'status' (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
                        // –ï—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ status –±—ã–ª–æ String, –∏ –º—ã –µ–≥–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –≤ statusRaw:
                        // newObject!["statusRaw"] = oldObject!["status"]
                        // –ï—Å–ª–∏ –≤ –≤–∞—à–µ–º —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ –ø–æ–ª–µ status –±—ã–ª–æ –∏ –≤—ã –µ–≥–æ —É–¥–∞–ª–∏–ª–∏, –∞ –¥–æ–±–∞–≤–∏–ª–∏ statusRaw:
                        // (–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'status' –≤ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ –∏–º–µ–ª –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä "Draft")
                        // newObject!["statusRaw"] = oldObject!["status"] ?? InvoiceStatus.draft.rawValue
                    }
                }
                
                print("Realm migration finished: \(oldSchemaVersion) -> \(currentSchemaVersion)")
            }
        )
        Realm.Configuration.defaultConfiguration = config
        
        self.realm = try Realm()
    }

    // MARK: - CRUD Operations

    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å—á–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.
    func save(invoice: Invoice) throws {
        var clientObject: ClientObject? = nil

        // –®–ê–ì 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—á–µ—Ç–∞.
        if let clientStruct = invoice.client {
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞.
            clientObject = ClientObject(client: clientStruct)

            try realm.write {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞. .modified –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.
                realm.add(clientObject!, update: .modified)
            }
        }

        // –®–ê–ì 2: –°–æ–∑–¥–∞–µ–º Realm Object –∏–∑ Swift —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
        // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –û–ë–ù–û–í–õ–ï–ù–ù–´–ô InvoiceObject(invoice:clientObject:)
        let invoiceObject = InvoiceObject(invoice: invoice, clientObject: clientObject)

        try realm.write {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É.
            realm.add(invoiceObject, update: .modified)
        }
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—á–µ—Ç–∞.
    func getAllInvoices() -> [Invoice] {
        let results = realm.objects(InvoiceObject.self)
            .sorted(byKeyPath: "creationDate", ascending: false)

        // –ú–∞–ø–ø–∏–Ω–≥ Realm Results –≤ –º–∞—Å—Å–∏–≤ Swift —Å—Ç—Ä—É–∫—Ç—É—Ä
        // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –û–ë–ù–û–í–õ–ï–ù–ù–´–ô InvoiceObject.toStruct
        return results.map { $0.toStruct }
    }

    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—á–µ—Ç –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID.
    func getInvoice(id: UUID) -> Invoice? {
        let object = realm.object(ofType: InvoiceObject.self, forPrimaryKey: id.uuidString)
        // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –û–ë–ù–û–í–õ–ï–ù–ù–´–ô InvoiceObject.toStruct
        return object?.toStruct
    }

    /// –£–¥–∞–ª—è–µ—Ç —Å—á–µ—Ç –ø–æ –µ–≥–æ ID.
    func deleteInvoice(id: UUID) throws {
        guard let objectToDelete = realm.object(ofType: InvoiceObject.self, forPrimaryKey: id.uuidString) else {
            return
        }

        try realm.write {
            realm.delete(objectToDelete)
        }
    }

    /// –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—á–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    func deleteAllInvoices() throws {
        let invoiceObjectsToDelete = realm.objects(InvoiceObject.self)
        let clientObjectsToDelete = realm.objects(ClientObject.self)

        try realm.write {
            realm.delete(invoiceObjectsToDelete)
            realm.delete(clientObjectsToDelete)
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–∞–∫–∂–µ –û–ë–ù–û–í–õ–ï–ù, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è)
    func updateInvoice(_ newInvoice: Invoice) throws {
        guard let existingInvoice = realm.object(ofType: InvoiceObject.self, forPrimaryKey: newInvoice.id.uuidString) else {
            print("‚ùå Invoice not found with id: \(newInvoice.id)")
            return
        }
        
        try realm.write {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è
            existingInvoice.invoiceTitle = newInvoice.invoiceTitle
            existingInvoice.taxRate = newInvoice.taxRate
            existingInvoice.discount = newInvoice.discount
            existingInvoice.invoiceDate = newInvoice.invoiceDate
            existingInvoice.dueDate = newInvoice.dueDate
            
            // üí° –ù–û–í–´–ï –ü–û–õ–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –≤–∞–ª—é—Ç—ã
            existingInvoice.statusRaw = newInvoice.status.rawValue
            existingInvoice.currencyRaw = newInvoice.currency.rawValue
            existingInvoice.totalAmount = newInvoice.totalAmount
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
            if let clientStruct = newInvoice.client {
                let clientObject = ClientObject(client: clientStruct)
                // –í–∞–∂–Ω–æ: –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã (EmbeddedObject) –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å/–æ–±–Ω–æ–≤–ª—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ,
                // –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –æ–±—ä–µ–∫—Ç–æ–º. ClientObject - –Ω–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π,
                // –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ.
                realm.add(clientObject, update: .modified)
                existingInvoice.client = clientObject
            } else {
                existingInvoice.client = nil // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º items ‚Äî —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            // –ü–æ—Å–∫–æ–ª—å–∫—É InvoiceItemObject —è–≤–ª—è–µ—Ç—Å—è EmbeddedObject, —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
            existingInvoice.items.removeAll()
            let newItemObjects = newInvoice.items.map { InvoiceItemObject(item: $0) }
            existingInvoice.items.append(objectsIn: newItemObjects)
        }
        
        print("‚úÖ Invoice updated: \(newInvoice.id)")
    }
}
