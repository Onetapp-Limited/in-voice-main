import UIKit
import SnapKit

class InvoicesViewController: UIViewController {
    lazy var invoiceTableView: UITableView = {
        let tableView = UITableView()
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.separatorStyle = .none
        return tableView
    }()
    
    lazy var invoicesSearchBar: UISearchBar = {
        let searchBar = UISearchBar()
        searchBar.translatesAutoresizingMaskIntoConstraints = false
        searchBar.placeholder = "Search Invoices or Clients"
        return searchBar
    }()
    
    var invoices: [Invoice] = []
    var filteredInvoices: [Invoice] = []
    var selectedInvoice: Invoice!
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = .systemBackground
        setupUI()
        setup()
    }
    
    // MARK: - Actions
    
    @objc func dismissSelf() {
        self.dismiss(animated: true, completion: nil)
    }
}

// MARK: - Setup (UI –∏ Data)
extension InvoicesViewController {
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI
    func setupUI() {
        // –î–æ–±–∞–≤–ª—è–µ–º Search Bar –≤ Navigation Bar, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Navigation Controller.
        // –ò–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ Header TableView, –µ—Å–ª–∏ –Ω–µ –≤ Navigation Controller.
        // –Ø –¥–æ–±–∞–≤–ª—é –µ–≥–æ –∫–∞–∫ Header, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:
        
        // 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Navigation Bar
        title = "Invoices"
        let dismissButton = UIBarButtonItem(barButtonSystemItem: .done, target: self, action: #selector(dismissSelf))
        navigationItem.leftBarButtonItem = dismissButton
        
        // 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Search Bar –∏ TableView
        view.addSubview(invoicesSearchBar)
        view.addSubview(invoiceTableView)
        
        invoicesSearchBar.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide.snp.top)
            make.leading.trailing.equalToSuperview()
        }
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è TableView
        invoiceTableView.snp.makeConstraints { make in
            make.top.equalTo(invoicesSearchBar.snp.bottom)
            make.leading.trailing.bottom.equalToSuperview()
        }
    }
    
    func setup() {
        invoiceTableView.delegate = self
        invoiceTableView.dataSource = self
        
        invoicesSearchBar.delegate = self
        
        // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∞—Å—Å, –∞ –Ω–µ Nib
        invoiceTableView.register(InvoiceTableViewCell.self, forCellReuseIdentifier: InvoiceTableViewCell.reuseIdentifier)
        
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –µ–µ –Ω–µ—Ç –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ
        invoices = fetchInvoices()
        
        invoices = invoices.sorted(by: { (i1, i2) -> Bool in
            i1.invoiceTitle?.lowercased() ?? "" < i2.invoiceTitle?.lowercased() ?? ""
        })
        filteredInvoices = invoices
    }
    
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è fetchInvoices –∏ Invoice (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–∞–º–∏)
    private func fetchInvoices() -> [Invoice] {
        // –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Å—á–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Core Data/Realm/JSON)
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª—Å—è
        return []
    }
    
    private func deleteInvoice(invoice: Invoice) {
        // –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    }
}

// MARK: - Extensions (–û—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–π reuseIdentifier)

// MARK: - Search Bar Delegate
extension InvoicesViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        // ... (–ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞)
        filteredInvoices = searchText.isEmpty ? invoices : invoices.filter({ (invoice) -> Bool in
            if invoice.invoiceTitle?.range(of: searchText, options: .caseInsensitive, range: nil, locale: nil) != nil {
                return true
            }
            if invoice.client?.clientName?.range(of: searchText, options: .caseInsensitive, range: nil, locale: nil) != nil {
                return true
            }
            return false
        })
        invoiceTableView.reloadData()
    }
}

// MARK: - Table View Delegate and Data Source
extension InvoicesViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return filteredInvoices.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º InvoiceTableViewCell.reuseIdentifier
        let cell = invoiceTableView.dequeueReusableCell(withIdentifier: InvoiceTableViewCell.reuseIdentifier, for: indexPath) as! InvoiceTableViewCell
        
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ filteredInvoices –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        let currentInvoice = filteredInvoices[indexPath.row]
        
        if let client = currentInvoice.client {
            cell.clientNameLabel.text = client.clientName ?? ""
        } else {
            cell.clientNameLabel.text = ""
        }
        
        cell.invoiceTitleLabel.text = currentInvoice.invoiceTitle ?? ""
        cell.dateLabel.text = currentInvoice.invoiceDate ?? ""
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 70
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
        
        if editingStyle == .delete {
            deleteInvoice(invoice: filteredInvoices[indexPath.row])
            filteredInvoices.remove(at: indexPath.row)
            invoiceTableView.reloadData()
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        selectedInvoice = filteredInvoices[indexPath.row]
        showInvoiceDetailVC()
    }
    
}

// MARK: - View Controller Flow (–£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç Storyboard)
extension InvoicesViewController {
    func showInvoiceDetailVC() {
        // üõë –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ Storyboard
//        let vc = NewInvoiceViewController()
//        
//        vc.modalPresentationStyle = .overFullScreen
//        vc.curInvoice = selectedInvoice
//        
//        self.present(vc, animated: true)
    }
}
